import {
  ActionRowBuilder,
  ButtonBuilder,
  StringSelectMenuBuilder,
  ButtonStyle,
  EmbedBuilder,
  StringSelectMenuOptionBuilder,
  ChannelType,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
} from 'discord.js';

interface SetupState {
  creatorChannel?: { id: string; name: string };
  category?: { id: string; name: string };
  position: 'top' | 'bottom';
  defaultName: string;
  defaultSlots: number;
  defaultBitrate: number;
  allowedActions?: string[];
}

export function createSetupEmbed(state: SetupState) {
  const creatorInfo = state.creatorChannel 
    ? `Kanal: üîà‚ûï„Éª${state.creatorChannel.name}`
    : 'Kanal: üîà‚ûï„ÉªNicht ausgew√§hlt';

  const categoryInfo = state.category
    ? `## üéÆ [===== ${state.category.name} =====] üéÆ`
    : '## üéÆ [===== Keine Kategorie =====] üéÆ';

  const positionEmoji = state.position === 'top' ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è';

  return new EmbedBuilder()
    .setTitle('Voice Channel Setup - Page 1/2')
    .setDescription(
      '**Ersteller:**\n' +
      `${creatorInfo}\n\n` +
      '**Kanal Einstellung:**\n' +
      `${categoryInfo}\n` +
      `‚Ä¢ Anordnung: ${positionEmoji}\n` +
      `‚Ä¢ Name: ¬ª ${state.defaultName || 'Nicht konfiguriert'}\n` +
      `‚Ä¢ Limit: ${state.defaultSlots || 0}\n` +
      '‚Ä¢ NSFW: ‚ùå\n\n' +
      '**Kanal Berechtigungen:**\n' +
      'Synchronisiert mit Kategorie\n\n' +
      '**Beschreibung:**\n' +
      'VC = Voice Chat :)'
    )
    .setColor('#5865F2')
    .setTimestamp();
}

export function createSetupEmbedPage2(state: SetupState) {
  const selectedActions = state.allowedActions || [];
  const actionEmojis: { [key: string]: string } = {
    'edit_name': '‚úèÔ∏è',
    'edit_limit': 'üìè',
    'transfer_owner': 'üìå',
    'kick_user': 'üë¢',
    'ban_user': 'üî®'
  };

  const actionLabels: { [key: string]: string } = {
    'edit_name': 'Name bearbeiten',
    'edit_limit': 'Limit bearbeiten',
    'transfer_owner': 'Besitzer √§ndern',
    'kick_user': 'Nutzer kicken',
    'ban_user': 'Nutzer ent-/bannen'
  };

  const selectedActionsText = selectedActions.length > 0
    ? selectedActions.map(action => `‚Ä¢ ${actionEmojis[action]} ${actionLabels[action]}`).join('\n')
    : 'Keine Aktionen ausgew√§hlt';

  return new EmbedBuilder()
    .setTitle('Voice Channel Setup - Page 2/2')
    .setDescription(
      '**Verf√ºgbare Kanalaktionen:**\n' +
      'W√§hle die Aktionen aus, die der Channel-Owner verwenden kann.\n\n' +
      '**Ausgew√§hlte Aktionen:**\n' +
      `${selectedActionsText}\n\n` +
      '**Beschreibung:**\n' +
      'Diese Einstellungen bestimmen, welche Aktionen der Besitzer eines tempor√§ren Voice-Channels ausf√ºhren kann.'
    )
    .setColor('#5865F2')
    .setTimestamp();
}

export function createActionButtons() {
  return new ActionRowBuilder<ButtonBuilder>()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('position_toggle')
        .setLabel('‚¨ÜÔ∏è')
        .setStyle(ButtonStyle.Secondary),
      new ButtonBuilder()
        .setCustomId('edit_settings')
        .setLabel('‚úèÔ∏è')
        .setStyle(ButtonStyle.Secondary),
      new ButtonBuilder()
        .setCustomId('delete_config')
        .setLabel('üóëÔ∏è')
        .setStyle(ButtonStyle.Danger),
      new ButtonBuilder()
        .setCustomId('next_page')
        .setLabel('‚û°Ô∏è')
        .setStyle(ButtonStyle.Secondary),
      new ButtonBuilder()
        .setCustomId('finish_setup')
        .setLabel('Abschlie√üen')
        .setStyle(ButtonStyle.Success)
        .setEmoji('‚úÖ')
    );
}

export function createTopButtonRow() {
  return createActionButtons();
}

export function createBottomButtonRow() {
  return new ActionRowBuilder<ButtonBuilder>()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('toggle_nsfw')
        .setLabel('üîû')
        .setStyle(ButtonStyle.Secondary)
    );
}

export function createVoiceChannelSelect(channels: { id: string; name: string }[]) {
  return new ActionRowBuilder<StringSelectMenuBuilder>()
    .addComponents(
      new StringSelectMenuBuilder()
        .setCustomId('voice_channel_select')
        .setPlaceholder('Sprachkanal ausw√§hlen...')
        .addOptions(
          channels.map(channel => 
            new StringSelectMenuOptionBuilder()
              .setLabel(channel.name)
              .setValue(channel.id)
          )
        )
    );
}

export function createCategorySelect(categories: { id: string; name: string }[]) {
  return new ActionRowBuilder<StringSelectMenuBuilder>()
    .addComponents(
      new StringSelectMenuBuilder()
        .setCustomId('category_select')
        .setPlaceholder('Kategorie ausw√§hlen...')
        .addOptions(
          categories.map(category => 
            new StringSelectMenuOptionBuilder()
              .setLabel(category.name)
              .setValue(category.id)
          )
        )
    );
}

export function createSettingsModal() {
  return new ModalBuilder()
    .setCustomId('settings_modal')
    .setTitle('Voice-Channel Einstellungen')
    .addComponents(
      new ActionRowBuilder<TextInputBuilder>().addComponents(
        new TextInputBuilder()
          .setCustomId('default_name')
          .setLabel('Standard Kanalname ($user$ = Benutzername)')
          .setStyle(TextInputStyle.Short)
          .setPlaceholder('¬ª $user$ VC')
          .setRequired(false)
      ),
      new ActionRowBuilder<TextInputBuilder>().addComponents(
        new TextInputBuilder()
          .setCustomId('default_slots')
          .setLabel('Standard Nutzerlimit (0 = Unbegrenzt)')
          .setStyle(TextInputStyle.Short)
          .setPlaceholder('0')
          .setRequired(false)
      )
    );
}

export function createChannelActionsSelect() {
  return new ActionRowBuilder<StringSelectMenuBuilder>()
    .addComponents(
      new StringSelectMenuBuilder()
        .setCustomId('channel_actions_select')
        .setPlaceholder('Kanalaktionen ausw√§hlen...')
        .setMinValues(0)
        .setMaxValues(5)
        .addOptions([
          new StringSelectMenuOptionBuilder()
            .setLabel('Name bearbeiten')
            .setDescription('Erlaubt dem Owner den Kanalnamen zu √§ndern')
            .setValue('edit_name')
            .setEmoji('‚úèÔ∏è'),
          new StringSelectMenuOptionBuilder()
            .setLabel('Limit bearbeiten')
            .setDescription('Erlaubt dem Owner das Nutzerlimit zu √§ndern')
            .setValue('edit_limit')
            .setEmoji('üìè'),
          new StringSelectMenuOptionBuilder()
            .setLabel('Besitzer √§ndern')
            .setDescription('Erlaubt dem Owner die Besitzerschaft zu √ºbertragen')
            .setValue('transfer_owner')
            .setEmoji('üìå'),
          new StringSelectMenuOptionBuilder()
            .setLabel('Nutzer kicken')
            .setDescription('Erlaubt dem Owner Nutzer aus dem Kanal zu kicken')
            .setValue('kick_user')
            .setEmoji('üë¢'),
          new StringSelectMenuOptionBuilder()
            .setLabel('Nutzer ent-/bannen')
            .setDescription('Erlaubt dem Owner Nutzer zu bannen/entbannen')
            .setValue('ban_user')
            .setEmoji('üî®')
        ])
    );
}

export function createTempVoiceEmbed(existingConfigs: { id: string; name: string }[]) {
  return new EmbedBuilder()
    .setTitle('Voice Channel Creator')
    .setDescription(
      'Hier kannst du die Einstellungen f√ºr die Voice-Channel Creator verwalten.\n\n' +
      '**Verf√ºgbare Optionen:**\n' +
      '‚Ä¢ W√§hle eine existierende Konfiguration aus dem Dropdown-Men√º\n' +
      '‚Ä¢ Erstelle eine neue Konfiguration mit dem Button\n\n' +
      '**Beschreibung:**\n' +
      'Der Voice-Channel Creator erm√∂glicht es Benutzern, tempor√§re Voice-Channels zu erstellen.'
    )
    .setColor('#5865F2')
    .setTimestamp();
}

export function createConfigSelect(configs: { id: string; name: string }[]) {
  return new ActionRowBuilder<StringSelectMenuBuilder>()
    .addComponents(
      new StringSelectMenuBuilder()
        .setCustomId('config_select')
        .setPlaceholder('Konfiguration ausw√§hlen...')
        .addOptions(
          configs.length > 0 
            ? configs.map(config => 
                new StringSelectMenuOptionBuilder()
                  .setLabel(config.name)
                  .setValue(config.id)
              )
            : [
                new StringSelectMenuOptionBuilder()
                  .setLabel('Keine Konfigurationen vorhanden')
                  .setValue('no_configs')
                  .setDescription('Erstelle eine neue Konfiguration mit dem Button unten')
                  .setDefault(true)
              ]
        )
    );
}

export function createNewConfigButton() {
  return new ActionRowBuilder<ButtonBuilder>()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('new_config')
        .setLabel('Neuen Creator erstellen')
        .setStyle(ButtonStyle.Success)
        .setEmoji('‚ûï')
    );
}
